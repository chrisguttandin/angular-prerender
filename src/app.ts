#!/usr/bin/env node

import module from 'module';
import { join } from 'path';
import { argv, cwd } from 'process';
import yargs from 'yargs';
import { peerDependencies } from './constants.js';
import { coerceParameterValues } from './functions/coerce-parameter-values.js';
import { coerceTargetSpecifier } from './functions/coerce-target-specifier.js';
import { loadScullyConfigAndPlugins } from './functions/load-scully-config-and-plugins.js';
import { readProperty } from './functions/read-property.js';
import { ICommandLineArguments } from './interfaces';

const require = module.createRequire(import.meta.url);
const missingPeerDependencies = peerDependencies.filter((peerDependency) => {
    try {
        require.resolve(peerDependency, { paths: [cwd()] });
    } catch {
        return true;
    }

    return false;
});

if (missingPeerDependencies.length > 0) {
    throw new Error(`Some of the required peer dependencies could not be found. (${missingPeerDependencies.join(', ')})`);
}

(async () => {
    const commandLineArguments = (<yargs.Argv<ICommandLineArguments>>yargs(argv.slice(2)))
        .help()
        .option('config', {
            default: join(cwd(), 'angular.json'),
            describe: 'specify the path to the angular.json file',
            type: 'string'
        })
        .option('exclude-routes', {
            default: <ICommandLineArguments['excludeRoutes']>[],
            describe: 'specify routes to skip',
            /* eslint-disable-next-line id-denylist */
            string: true,
            type: 'array'
        })
        .option('include-routes', {
            default: <ICommandLineArguments['includeRoutes']>[],
            describe: 'specify routes to include',
            /* eslint-disable-next-line id-denylist */
            string: true,
            type: 'array'
        })
        .option('parameter-values', {
            coerce: coerceParameterValues,
            default: '{}',
            describe: 'specify the parameter values which should be replaced with the parameter in the routes',
            type: 'string'
        })
        .option('preserve-index-html', {
            default: false,
            describe: 'set this to true if you want to preserve the index.html generated by the browser build',
            type: 'boolean'
        })
        .option('recursive', {
            default: false,
            describe: 'set this to true if you want to scan prerendered documents for additional routes',
            type: 'boolean'
        })
        .option('scully-config', {
            describe: 'specify the path to the Scully configuration file',
            type: 'string'
        })
        .option('target', {
            coerce: coerceTargetSpecifier,
            default: 'build',
            describe: 'specify the target inside your angular.json file which is used to build the single page app',
            type: 'string'
        })
        .option('verbose', {
            alias: 'v',
            default: false,
            describe: 'set this flag if you prefer more detailed log messages',
            type: 'boolean'
        })
        .strict().argv;

    if (commandLineArguments instanceof Promise) {
        throw new TypeError('The command line arguments are expected to get parsed synchronously.');
    }

    const {
        config,
        excludeRoutes,
        includeRoutes,
        parameterValues: nestedParameterValuesMap,
        preserveIndexHtml: shouldPreserveIndexHtml,
        recursive: isRecursive,
        scullyConfig: scullyConfigFile,
        target,
        verbose: isVerbose
    } = commandLineArguments;
    const { prerender } = await import('./functions/prerender.js');
    const { config: scullyConfig, plugins: scullyPlugins } = await loadScullyConfigAndPlugins(cwd(), require, scullyConfigFile);

    prerender(
        config,
        excludeRoutes,
        includeRoutes,
        isRecursive,
        isVerbose,
        nestedParameterValuesMap,
        readProperty,
        require,
        scullyConfig,
        scullyPlugins,
        shouldPreserveIndexHtml,
        target
    );
})();
