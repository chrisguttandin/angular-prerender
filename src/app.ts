#!/usr/bin/env node

import { join } from 'path';
import { cwd } from 'process';
import yargs from 'yargs';
import { peerDependencies } from './constants';
import { coerceParameterValues } from './functions/coerce-parameter-values';
import { coerceTargetSpecifier } from './functions/coerce-target-specifier';
import { loadPeerDependencies } from './functions/load-peer-dependencies';
import { loadScullyConfigAndPlugins } from './functions/load-scully-config-and-plugins';
import { readProperty } from './functions/read-property';
import { ICommandLineArguments } from './interfaces';

const missingPeerDependencies = peerDependencies.filter((peerDependency) => {
    try {
        require.resolve(peerDependency, { paths: [cwd()] });
    } catch {
        return true;
    }

    return false;
});

if (missingPeerDependencies.length > 0) {
    throw new Error(`Some of the required peer dependencies could not be found. (${missingPeerDependencies.join(', ')})`);
}

if (require.main !== module) {
    throw new Error('This script is meant to be executed from the command line.');
}

(async () => {
    const commandLineArguments = (<yargs.Argv<ICommandLineArguments>>yargs)
        .help()
        .option('browser-target', {
            coerce: coerceTargetSpecifier,
            default: 'build',
            describe: 'specify the target inside your angular.json file which is used to build the single page app',
            type: 'string'
        })
        .option('config', {
            default: join(cwd(), 'angular.json'),
            describe: 'specify the path to the angular.json file',
            type: 'string'
        })
        .option('exclude-routes', {
            default: [],
            describe: 'specify routes to skip',
            type: 'array'
        })
        .option('ignore-status-code', {
            default: true,
            describe: 'set this to false if you want to not render routes that return a status code of 300 or above',
            type: 'boolean'
        })
        .option('include-routes', {
            default: [],
            describe: 'specify routes to include',
            type: 'array'
        })
        .option('parameter-values', {
            coerce: coerceParameterValues,
            default: '{}',
            describe: 'specify the parameter values which should be replaced with the parameter in the routes',
            type: 'string'
        })
        .option('preserve-index-html', {
            default: false,
            describe: 'set this to true if you want to preserve the index.html generated by the browser build',
            type: 'boolean'
        })
        .option('scully-config', {
            describe: 'specify the path to the Scully configuration file',
            type: 'string'
        })
        .option('server-target', {
            coerce: coerceTargetSpecifier,
            default: 'server',
            describe: 'specify the target inside your angular.json file which is used to build the server side code',
            type: 'string'
        })
        .option('verbose', {
            alias: 'v',
            default: false,
            describe: 'set this flag if you prefer more detailed log messages',
            type: 'boolean'
        })
        .strict().argv;

    if (commandLineArguments instanceof Promise) {
        throw new Error('The command line arguments are expected to get parsed synchronously.');
    }

    const {
        browserTarget,
        config,
        excludeRoutes,
        ignoreStatusCode: shouldIgnoreStatusCode,
        includeRoutes,
        parameterValues: nestedParameterValuesMap,
        preserveIndexHtml: shouldPreserveIndexHtml,
        scullyConfig: scullyConfigFile,
        serverTarget,
        verbose: isVerbose
    } = commandLineArguments;
    // @todo Use import() instead of require() when dropping support for Node v10.
    const { prerender }: typeof import('./functions/prerender') = require('./functions/prerender'); // tslint:disable-line:max-line-length no-require-imports
    const { enableProdMode, expressResponseToken, hapiResponseToken } = await loadPeerDependencies(cwd());
    const { config: scullyConfig, plugins: scullyPlugins } = await loadScullyConfigAndPlugins(cwd(), scullyConfigFile);

    prerender(
        browserTarget,
        config,
        enableProdMode,
        excludeRoutes,
        expressResponseToken,
        hapiResponseToken,
        includeRoutes,
        isVerbose,
        nestedParameterValuesMap,
        readProperty,
        scullyConfig,
        scullyPlugins,
        serverTarget,
        shouldIgnoreStatusCode,
        shouldPreserveIndexHtml
    );
})();
